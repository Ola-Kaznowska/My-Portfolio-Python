import subprocess
import re
from scapy.all import ARP, Ether, srp
from colorama import Fore, Style, init


init(autoreset=True)

def get_wifi_profiles():
    try:
        output = subprocess.check_output(["netsh", "wlan", "show", "profiles"], shell=True, text=True)
        profiles = re.findall(r":\s(.*)", output)
        return profiles
    except Exception as e:
        print(f"{Fore.RED}[!] Error retrieving Wi-Fi profiles: {e}{Style.RESET_ALL}")
        return []

def get_wifi_password(ssid):
    try:
        output = subprocess.check_output(["netsh", "wlan", "show", "profile", ssid, "key=clear"], shell=True, text=True)
        password = re.search(r"Key Content\s*:\s*(.*)", output)
        return password.group(1).strip() if password else "No password found"
    except Exception as e:
        print(f"{Fore.RED}[!] Error retrieving password for {ssid}: {e}{Style.RESET_ALL}")
        return "Error"

def scan_wifi_networks():
    try:
        if os.name == "nt":
            output = subprocess.check_output(["netsh", "wlan", "show", "networks"], shell=True, text=True)
            ssids = re.findall(r"SSID\s*\d+\s*:\s*(.*)", output)
            return ssids
        else:
            output = subprocess.check_output(["iwlist", "scan"], shell=True, text=True)
            ssids = re.findall(r'ESSID:"(.*?)"', output)
            return ssids
    except Exception as e:
        print(f"{Fore.RED}[!] Error scanning Wi-Fi networks: {e}{Style.RESET_ALL}")
        return []

def scan_network_devices(ip_range):
    print(f"{Fore.CYAN}[*] Scanning for devices on {ip_range}...{Style.RESET_ALL}")
    arp = ARP(pdst=ip_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether / arp
    result = srp(packet, timeout=3, verbose=0)[0]
    devices = []
    for sent, received in result:
        devices.append({'ip': received.psrc, 'mac': received.hwsrc})
    return devices

def main():
    print(f"{Fore.GREEN}[+] Wi-Fi Network Scanner & Password Extractor{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}[*] Scanning for nearby Wi-Fi networks...{Style.RESET_ALL}")
    ssids = scan_wifi_networks()
    if ssids:
        print(f"{Fore.GREEN}[+] Found Wi-Fi networks:{Style.RESET_ALL}")
        for ssid in ssids:
            print(f"  - {ssid}")
    else:
        print(f"{Fore.RED}[!] No Wi-Fi networks found.{Style.RESET_ALL}")

    # Retrieve saved Wi-Fi passwords (Windows)
    print(f"{Fore.YELLOW}[*] Extracting saved Wi-Fi passwords...{Style.RESET_ALL}")
    profiles = get_wifi_profiles()
    if profiles:
        print(f"{Fore.GREEN}[+] Saved Wi-Fi profiles:{Style.RESET_ALL}")
        for profile in profiles:
            password = get_wifi_password(profile)
            print(f"  - {profile}: {password}")
    else:
        print(f"{Fore.RED}[!] No saved Wi-Fi profiles found.{Style.RESET_ALL}")

    # Scan for connected devices (ARP)
    local_ip = "192.168.1.1/24"  # Adjust based on your network
    devices = scan_network_devices(local_ip)
    if devices:
        print(f"{Fore.GREEN}[+] Connected devices:{Style.RESET_ALL}")
        for device in devices:
            print(f"  - IP: {device['ip']}, MAC: {device['mac']}")
    else:
        print(f"{Fore.RED}[!] No devices found on the network.{Style.RESET_ALL}")

if __name__ == "__main__":
    import os
    if os.name == "nt":
        main()
    else:
        print(f"{Fore.RED}[!] This script is designed for Windows due to 'netsh' dependency.{Style.RESET_ALL}")
